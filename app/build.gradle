apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'kotlinx-serialization'

apply plugin: 'io.gitlab.arturbosch.detekt'

apply plugin: 'jacoco'

apply plugin: 'io.fabric'

apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion compilesdk_version
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.untha"
        minSdkVersion minsdk_version
        targetSdkVersion targetsdk_version
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled = true
        }
    }

    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
        reports {
            xml.enabled = true
            html.enabled = true
        }

        def fileFilter = ['**/R.class',
                          '**/R$*.class',
                          '**/BuildConfig.*',
                          '**/Manifest*.*',
                          '**/*Test*.*',
                          'android/**/*.*',
                          '**/data/models/*']
        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/java/"

        sourceDirectories.from = files([mainSrc])
        classDirectories.from = files([debugTree])
        executionData.from = fileTree(dir: "$buildDir", includes: [
                "jacoco/testDebugUnitTest.exec",
                "outputs/code-coverage/connected/*coverage.ec"
        ])

    }

    lintOptions {
        lintConfig file("lint.xml")
        // Turns off checks for the issue IDs you specify.
        disable 'TypographyFractions', 'TypographyQuotes'
        // Turns on checks for the issue IDs you specify. These checks are in
        // addition to the default lint checks.
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        quiet true
        // if set to true (default), stops the build if errors are found.
        abortOnError true
        // if true, only report errors.
        ignoreWarnings true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.core:core-ktx:$android_x_version"
    implementation "androidx.appcompat:appcompat:$android_x_version"
    implementation "androidx.appcompat:appcompat:$android_x_version"
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-android-viewmodel:$koin_version"
    implementation "androidx.recyclerview:recyclerview:$supportlibrary_x_version"
    implementation "androidx.cardview:cardview:$supportlibrary_x_version"
    implementation "androidx.vectordrawable:vectordrawable-animated:$supportlibrary_x_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleExtensionsVersion"
    implementation "org.jetbrains.anko:anko:$anko_version"
    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:$kotlinx_version"
    implementation "androidx.recyclerview:recyclerview:$recycler_view_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation "me.linshen.retrofit2:adapter-livedata:$adapter_livedata_version"
    implementation "com.google.android.gms:play-services-auth:$google_play_services_version"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    // Firebase
    implementation "com.google.firebase:firebase-analytics:$firebase_version"
    implementation "com.google.firebase:firebase-core:$firebase_version"
    implementation "com.android.support:multidex:$multidex_version"
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlytics_version"
    kapt "androidx.room:room-compiler:$room_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycleVersion"
    //Test Implementations
    testImplementation "junit:junit:$junit_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.koin:koin-test:$koin_version"
    testImplementation "com.nhaarman:mockito-kotlin:$mockito_kotlin_version"
    testImplementation "androidx.arch.core:core-testing:$lifecycleExtensionsVersion"
    androidTestImplementation "androidx.test:runner:$test_runner_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation "androidx.test.ext:junit:$test_ext_version"
}
